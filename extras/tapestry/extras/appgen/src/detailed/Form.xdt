<XDtTagDef:tagDef namespace="Form" handler="org.example.antbook.xdoclet.FormTagsHandler"/>package <XDtForm:parentPackageName/>.webapp.action;

import org.apache.tapestry.IRequestCycle;
import org.apache.tapestry.engine.ILink;
import org.apache.tapestry.event.PageEvent;
import org.apache.tapestry.event.PageBeginRenderListener;

import <XDtConfig:configParameterValue paramName="basePackageName"/>.webapp.action.BasePage;
import <XDtPackage:packageName/>.<XDtForm:className/>;
import <XDtForm:parentPackageName/>.service.<XDtForm:className/>Manager;

public abstract class <XDtForm:className/>Form extends BasePage implements PageBeginRenderListener {
    public abstract <XDtForm:className/>Manager get<XDtForm:className/>Manager();
    public abstract void set<XDtForm:className/>(<XDtForm:className/> <XDtForm:classNameLower/>);
    public abstract <XDtForm:className/> get<XDtForm:className/>();

    public void pageBeginRender(PageEvent event) {
        if ((get<XDtForm:className/>() == null) && !event.getRequestCycle().isRewinding()) {
            set<XDtForm:className/>(new <XDtForm:className/>());
        } else if (event.getRequestCycle().isRewinding()) { // add
            set<XDtForm:className/>(new <XDtForm:className/>());
        }
    }

    public ILink cancel(IRequestCycle cycle) {
        log.debug("Entering 'cancel' method");
        return getEngineService().getLink(false, "<XDtForm:classNameLower/>s");
    }

    public ILink delete(IRequestCycle cycle) {
        log.debug("entered 'delete' method");

        get<XDtForm:className/>Manager().remove<XDtForm:className/>(get<XDtForm:className/>().<XDtMethodEx:idField getType="getterName"/>().toString());

        <XDtForm:className/>List nextPage = (<XDtForm:className/>List) cycle.getPage("<XDtForm:classNameLower/>s");
        nextPage.setMessage(getText("<XDtForm:classNameLower/>.deleted"));
        return getEngineService().getLink(false, nextPage.getPageName());
    }

    public ILink save(IRequestCycle cycle) {
        if (getDelegate().getHasErrors()) {
            return null;
        }

        boolean isNew = (get<XDtForm:className/>().<XDtMethodEx:idField getType="getterName"/>() == null);

        get<XDtForm:className/>Manager().save<XDtForm:className/>(get<XDtForm:className/>());

        String key = (isNew) ? "<XDtForm:classNameLower/>.added" : "<XDtForm:classNameLower/>.updated";

        if (isNew) {
            <XDtForm:className/>List nextPage = (<XDtForm:className/>List) cycle.getPage("<XDtForm:classNameLower/>s");
            nextPage.setMessage(getText(key));
            return getEngineService().getLink(false, nextPage.getPageName());
        } else {
            setMessage(getText(key));
            return null; // return to current page
        }
    }
}

<!-- This tool is originally based on StrutsGen, created by Erik Hatcher -->
<project name="appgen" default="default">

    <property file="${user.home}/${ant.project.name}-build.properties"/>
    <property file="${user.home}/build.properties"/>
    <property file="../../build.properties"/>

    <property name="lib.dir" location="../../lib"/>
    <property file="${lib.dir}/lib.properties"/>

    <path id="xdoclet.classpath">
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${commons-logging.jar}"/>
        <pathelement location="${commons-collections.jar}"/>
        <fileset dir="${xdoclet.dir}" includes="*.jar"/>
    </path>

    <property name="model.src.dir" location="../../src/dao"/>
    <property name="overwrite" value="false"/>
    <property name="gen.dir" value="gen"/> 
    <property name="app.package" value="org/appfuse"/>
    
    <target name="init">
        <mkdir dir="${build.dir}"/>
        <fail unless="model.name">
            You must specify a POJO using -Dmodel.name=Class and the lowercase
            name using -Dmodel.name.lowercase=class (for naming JSPs)   
        </fail>
        <fail unless="model.name.lowercase">
            You must specify a POJO lowercase name using 
            -Dmodel.name.lowercase=class (for naming JSPs)   
        </fail>
    </target>
        
    <!-- For some reason, XDoclet is only happy if the tag handler
         is recompiled, hence the clean dependency *shrug* -->
    <target name="default" depends="clean,gen"/>
        
    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="compile" depends="init">
        <mkdir dir="${build.dir}"/>
        <javac srcdir="src"
               destdir="${build.dir}"
               debug="${javac.debug}"
               classpathref="xdoclet.classpath"/>
    </target>

    <target name="gen" depends="compile">
        <taskdef name="xdoclet" classname="xdoclet.DocletTask">
            <classpath>
                <path refid="xdoclet.classpath"/>
                <pathelement location="${build.dir}"/>
            </classpath>
        </taskdef>
        <property name="template.dir" value="src"/>
        
        <xdoclet destdir="${build.dir}"
                 excludedtags="@version,@author"
                 force="${xdoclet.force}">
            <fileset dir="${model.src.dir}" includes="**/${model.name}.java"/>
            <!-- NOTE: You must have {0} in the destinationFile for the class
                       to be available to templates -->   
            
            <!-- DAO Test -->   
            <template templateFile="${template.dir}/detailed/DAOTest.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/test/dao/${app.package}/dao/{0}DAOTest.java"/>
            <!-- DAO Interface -->   
            <template templateFile="${template.dir}/detailed/DAO.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/src/dao/${app.package}/dao/{0}DAO.java"/>
            <!-- Hibernate DAO Implementation -->   
            <template templateFile="${template.dir}/detailed/DAOHibernate.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/src/dao/${app.package}/dao/hibernate/{0}DAOHibernate.java"/>
            <!-- Spring DAO Configuration -->   
            <template templateFile="${template.dir}/detailed/context-hibernate.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/src/dao/${app.package}/dao/hibernate/context-hibernate-{0}.xml"/> 
            <!-- Manager Test (uses jMock) -->   
            <template templateFile="${template.dir}/detailed/ManagerTest.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/test/service/${app.package}/service/{0}ManagerTest.java"/>
            <!-- Manager Interface --> 
            <template templateFile="${template.dir}/detailed/Manager.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/src/service/${app.package}/service/{0}Manager.java"/>
            <!-- Manager Implementation -->    
            <template templateFile="${template.dir}/detailed/ManagerImpl.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/src/service/${app.package}/service/impl/{0}ManagerImpl.java"/>
            <!-- Spring Manager Configuration --> 
            <template templateFile="${template.dir}/detailed/context-service.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/src/service/${app.package}/service/context-service-{0}.xml"/>
            <!-- Constant values -->   
            <template templateFile="${template.dir}/Constants.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/src/dao/${app.package}/Constants-{0}.java"/>
            <!-- Action Test -->
            <template templateFile="${template.dir}/ActionTest.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/test/web/${app.package}/webapp/action/{0}ActionTest.java"/>
            <!-- Detailed Action -->
            <template templateFile="${template.dir}/detailed/Action.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/src/web/${app.package}/webapp/action/{0}Action.java"/>
            <!-- Generic Action -->
            <template templateFile="${template.dir}/generic/Action.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/generic/src/web/${app.package}/webapp/action/{0}Action.java"/>
            <!-- Sample data for DBUnit -->    
            <template templateFile="${template.dir}/sample-data.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/metadata/sql/sample-data-{0}.xml"/>
            <!-- Tests for Canoo -->    
            <template templateFile="${template.dir}/web-tests.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/test/web/web-tests-{0}.xml"/>    
            <!-- i18n entries -->
            <template templateFile="${template.dir}/FormKeys.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/web/WEB-INF/classes/{0}.properties"/>
            <!-- Form JSP -->
            <template templateFile="${template.dir}/Form_jsp.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/web/pages/{0}Form.jsp"/>
            <!-- List JSP -->
            <template templateFile="${template.dir}/List_jsp.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/web/pages/{0}List.jsp"/>
            <!-- Menu Config -->
            <template templateFile="${template.dir}/menu-config.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/web/WEB-INF/menu-config-{0}.xml"/>
            <!-- Menu JSP -->
            <template templateFile="${template.dir}/menu_jsp.xdt"
                      acceptAbstractClasses="false"
                      prefixWithPackageStructure="false"
                      destinationFile="${gen.dir}/web/pages/menu-{0}.jsp"/>
        </xdoclet>
    </target>
   
    <property name="generated.dir" value="${build.dir}/${gen.dir}"/>
    
    <target name="install-src-detailed">
        <antcall target="default"/> 
        <echo>Copying all .java files into main project, overwrite="${overwrite}"</echo>
        <copy todir="../.." overwrite="${overwrite}">
            <fileset dir="${generated.dir}">
                <include name="**/*.java"/>
                <exclude name="**/Constants-*.java"/>
                <exclude name="${generated.dir}/generic/**"/>
            </fileset>   
        </copy>
        
        <echo>Adding beans to Spring config files</echo>
        <loadfile property="hibernate.context"
            srcfile="${generated.dir}/src/dao/${app.package}/dao/hibernate/context-hibernate-${model.name}.xml"/>
        <!-- Add to the bottom of the list of beans -->   
        <replace file="../../src/dao/${app.package}/dao/hibernate/applicationContext-hibernate.xml">
            <replacetoken><![CDATA[</beans>]]></replacetoken>
        </replace>
        <echo file="../../src/dao/${app.package}/dao/hibernate/applicationContext-hibernate.xml" append="true" 
            message="${hibernate.context}"/>
     
        <loadfile property="service.context"
            srcfile="${generated.dir}/src/service/${app.package}/service/context-service-${model.name}.xml"/>
        <!-- Add to the bottom of the list of beans -->   
        <replace file="../../src/service/${app.package}/service/applicationContext-service.xml">
            <replacetoken><![CDATA[</beans>]]></replacetoken>
        </replace>
        <echo file="../../src/service/${app.package}/service/applicationContext-service.xml" append="true" 
            message="${service.context}"/>    
    </target>   
 
    <target name="install-src-generic">
        <antcall target="default"/>    
        <echo>Copying Controller and Test into main project, overwrite="${overwrite}"</echo>
        <copy todir="../../" overwrite="${overwrite}">
            <fileset dir="${generated.dir}/generic" includes="**/*.java"/>
        </copy>
        <copy todir="../../test" overwrite="${overwrite}">
            <fileset dir="${generated.dir}/test" includes="**/action/*Test.java"/>
        </copy>
    </target>
            
    <target name="install-other">
        <echo>Merging constant values into Constants.java</echo>
        <loadfile property="constants"
            srcfile="${generated.dir}/src/dao/${app.package}/Constants-${model.name}.java"/>
        <!-- Add to the bottom of the list of tests -->   
        <replace file="../../src/dao/${app.package}/Constants.java">
            <replacetoken>}</replacetoken>
        </replace>
        <echo file="../../src/dao/${app.package}/Constants.java" append="true" 
            message="${constants}"/>
            
        <echo>Merging sample-data into metadata/sql/sample-data.xml</echo>   
        <loadfile property="sample.data"
            srcfile="${generated.dir}/metadata/sql/sample-data-${model.name}.xml"/>
        <!-- Add to the bottom of the list of tables -->   
        <replace file="../../metadata/sql/sample-data.xml" value="${sample.data}">
            <replacetoken><![CDATA[</dataset>]]></replacetoken>
        </replace>
        
        <echo>Merging web-tests into test/web/web-tests.xml</echo>   
        <loadfile property="web.tests"
            srcfile="${generated.dir}/test/web/web-tests-${model.name}.xml"/>
        <!-- Add to the bottom of the list of tests -->   
        <replace file="../../test/web/web-tests.xml" value="${web.tests}">
            <replacetoken><![CDATA[</project>]]></replacetoken>
        </replace>
        <!-- Add to run-all-tests target -->
        <replace file="../../test/web/web-tests.xml" value=",${model.name}Tests&quot;">
            <replacetoken><![CDATA["
        description="Call and executes all test cases (targets)"]]></replacetoken>
        </replace>

        <!-- Append contents of .properties file to application resources -->
        <echo>Adding keys to ApplicationResources_en.properties</echo> 
        <loadfile property="i18n.keys"
            srcfile="${generated.dir}/web/WEB-INF/classes/${model.name}.properties"/>
        <echo file="../../web/WEB-INF/classes/ApplicationResources_en.properties"
            append="true" message="${i18n.keys}"/>
        
         <copy file="${generated.dir}/web/pages/${model.name}Form.jsp" overwrite="${overwrite}"
            tofile="../../web/pages/${model.name.lowercase}Form.jsp"/>   
         <copy file="${generated.dir}/web/pages/${model.name}List.jsp" overwrite="${overwrite}"
            tofile="../../web/pages/${model.name.lowercase}List.jsp"/>
     
         <!-- Add links to main menu and side menu -->
        <echo>Adding links to menu</echo>   
        <loadfile property="menu.config"
            srcfile="${generated.dir}/web/WEB-INF/menu-config-${model.name}.xml"/>
        <!-- Add to the bottom of the list of tests -->   
        <replace file="../../web/WEB-INF/menu-config.xml" value="${menu.config}">
            <replacetoken><![CDATA[    </Menus>]]></replacetoken>  
        </replace>

        <loadfile property="menu.jsp"
            srcfile="${generated.dir}/web/pages/menu-${model.name}.jsp"/>
        <!-- Add to the bottom of the list of tests -->   
        <replace file="../../web/pages/menu.jsp" value="${menu.jsp}">
            <replacetoken><![CDATA[</menu:useMenuDisplayer>]]></replacetoken>  
        </replace>
    </target>
            
    <target name="install" depends="install-src-generic,install-other"
        description="Generates generic code and copies into main project">
        <echo>Installation completed successfully!</echo>
    </target>   
          
    <target name="install-detailed" depends="install-src-detailed,install-other"
        description="Generates detailed source code and copies into main project">
        <echo>Installation completed successfully!</echo>
    </target>  
        
    <!-- =================================================================== -->
    <!-- Creates new project, copies Person.java to model directory,         -->
    <!-- generates generic persistence code and runs tests.                  -->
    <!-- =================================================================== -->
    <target name="test-detailed" 
        description="Creates new project and generates detailed code">
        <property name="app.name" value="appfuse-appgen2"/>
        <property name="db.name" value="appfuse"/>
        <delete dir="../../../${app.name}"/>
        <ant dir="../.." target="new"/>
 
        <!-- Copy test model object into new project -->   
        <copy todir="../../../${app.name}/src">
            <fileset dir="test" includes="**/Person.java"/>
        </copy> 
        <!-- Add the mapping file for Person to applicationContext-hibernate.xml -->
        <replace dir="../../../${app.name}/src">
            <include name="**/applicationContext-hibernate.xml"/>
            <replacetoken><![CDATA[<value>org/appfuse/model/Role.hbm.xml</value>]]></replacetoken>
            <replacevalue><![CDATA[<value>org/appfuse/model/Person.hbm.xml</value>
                <value>org/appfuse/model/Role.hbm.xml</value>]]></replacevalue>
        </replace>  
    
        <!-- New project created, gen code and run tests -->
        <ant dir="../../../${app.name}/extras/appgen" target="install-detailed" inheritAll="false">
            <property name="model.name" value="Person"/>
            <property name="model.name.lowercase" value="person"/>   
        </ant>   
        <ant dir="../../../${app.name}" target="setup" inheritAll="false"/>   
        <ant dir="../../../${app.name}" target="test-all" inheritAll="false"/>
    </target>      

    <!-- =================================================================== -->
    <!-- Creates new project, copies Person.java to model directory,         -->
    <!-- generates generic persistence code and runs tests.                  -->
    <!-- =================================================================== -->
    <target name="test" 
        description="Creates new project and generates generic persistence code">
        <property name="app.name" value="appfuse-appgen"/>
        <property name="db.name" value="appfuse"/>
        <delete dir="../../../${app.name}"/>
        <ant dir="../.." target="new"/>

        <!-- Copy test model object into new project -->   
        <copy todir="../../../${app.name}/src">
            <fileset dir="test" includes="**/Person.java"/>
        </copy>   
        <!-- Add the mapping file for Person to applicationContext-hibernate.xml -->
        <replace dir="../../../${app.name}/src">
            <include name="**/applicationContext-hibernate.xml"/>
            <replacetoken><![CDATA[<value>org/appfuse/model/Role.hbm.xml</value>]]></replacetoken>
            <replacevalue><![CDATA[<value>org/appfuse/model/Person.hbm.xml</value>
                <value>org/appfuse/model/Role.hbm.xml</value>]]></replacevalue>
        </replace>   
        
        <!-- New project created, gen code and run tests -->
        <ant dir="../../../${app.name}/extras/appgen" target="install" inheritAll="false">
            <property name="model.name" value="Person"/>
            <property name="model.name.lowercase" value="person"/>   
        </ant>   
        <ant dir="../../../${app.name}" target="setup" inheritAll="false"/>   
        <ant dir="../../../${app.name}" target="test-all" inheritAll="false"/>
    </target>   
 
    <target name="test-all" depends="test"
        description="Tests generic and detailed code generation methods">  
        <antcall target="test-detailed" inheritAll="false"/>
    </target>
</project>





<XDtTagDef:tagDef namespace="Form" handler="org.example.antbook.xdoclet.FormTagsHandler"/>package <XDtForm:parentPackageName/>.webapp.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import <XDtForm:parentPackageName/>.Constants;
import <XDtPackage:packageName/>.<XDtClass:className/>;
import <XDtForm:parentPackageName/>.service.<XDtClass:className/>Manager;
import <XDtForm:parentPackageName/>.webapp.form.<XDtClass:className/>Form;

/**
 * @struts.action name="<XDtForm:classNameLower/>Form" path="/edit<XDtClass:className/>" scope="request"
 *  validate="false" parameter="method" input="list"
 * 
 * @struts.action name="<XDtForm:classNameLower/>Form" path="/save<XDtClass:className/>" scope="request"
 *  validate="true" parameter="method" input="edit"
 * 
 * @struts.action-forward name="edit" path="/WEB-INF/pages/<XDtForm:classNameLower/>Form.jsp"
 * @struts.action-forward name="list" path="/WEB-INF/pages/<XDtForm:classNameLower/>List.jsp"
 */
public final class <XDtClass:className/>Action extends BaseAction {
    
    public ActionForward cancel(ActionMapping mapping, ActionForm form,
                                HttpServletRequest request,
                                HttpServletResponse response)
    throws Exception {
        return search(mapping, form, request, response);
    }

    public ActionForward delete(ActionMapping mapping, ActionForm form,
                                HttpServletRequest request,
                                HttpServletResponse response)
    throws Exception {
        if (log.isDebugEnabled()) {
            log.debug("Entering 'delete' method");
        }

        ActionMessages messages = new ActionMessages();
        <XDtClass:className/>Form <XDtForm:classNameLower/>Form = (<XDtClass:className/>Form) form;

        // Exceptions are caught by ActionExceptionHandler
        <XDtClass:className/>Manager mgr = (<XDtClass:className/>Manager) getBean("<XDtForm:classNameLower/>Manager");
        mgr.remove<XDtClass:className/>(<XDtForm:classNameLower/>Form.getId());

        messages.add(ActionMessages.GLOBAL_MESSAGE,
                     new ActionMessage("<XDtForm:classNameLower/>.deleted"));

        // save messages in session, so they'll survive the redirect
        saveMessages(request.getSession(), messages);

        return search(mapping, form, request, response);
    }

    public ActionForward edit(ActionMapping mapping, ActionForm form,
                              HttpServletRequest request,
                              HttpServletResponse response)
    throws Exception {
        if (log.isDebugEnabled()) {
            log.debug("Entering 'edit' method");
        }

        <XDtClass:className/>Form <XDtForm:classNameLower/>Form = (<XDtClass:className/>Form) form;

        // if an id is passed in, look up the user - otherwise
        // don't do anything - user is doing an add
        if (<XDtForm:classNameLower/>Form.getId() != null) {
            <XDtClass:className/>Manager mgr = (<XDtClass:className/>Manager) getBean("<XDtForm:classNameLower/>Manager");
            <XDtClass:className/> <XDtForm:classNameLower/> = mgr.get<XDtClass:className/>(<XDtForm:classNameLower/>Form.getId());
            <XDtForm:classNameLower/>Form = (<XDtClass:className/>Form) convert(<XDtForm:classNameLower/>);
            updateFormBean(mapping, request, <XDtForm:classNameLower/>Form);
        }

        return mapping.findForward("edit");
    }

    public ActionForward save(ActionMapping mapping, ActionForm form,
                              HttpServletRequest request,
                              HttpServletResponse response)
    throws Exception {
        if (log.isDebugEnabled()) {
            log.debug("Entering 'save' method");
        }

        // Extract attributes and parameters we will need
        ActionMessages messages = new ActionMessages();
        <XDtClass:className/>Form <XDtForm:classNameLower/>Form = (<XDtClass:className/>Form) form;
        boolean isNew = ("".equals(<XDtForm:classNameLower/>Form.getId()) || <XDtForm:classNameLower/>Form.getId() == null);

        <XDtClass:className/>Manager mgr = (<XDtClass:className/>Manager) getBean("<XDtForm:classNameLower/>Manager");
        <XDtClass:className/> <XDtForm:classNameLower/> = (<XDtClass:className/>) convert(<XDtForm:classNameLower/>Form);
        mgr.save<XDtClass:className/>(<XDtForm:classNameLower/>);

        // add success messages
        if (isNew) {
            messages.add(ActionMessages.GLOBAL_MESSAGE,
                         new ActionMessage("<XDtForm:classNameLower/>.added"));

            // save messages in session to survive a redirect
            saveMessages(request.getSession(), messages);

            return search(mapping, form, request, response);
        } else {
            messages.add(ActionMessages.GLOBAL_MESSAGE,
                         new ActionMessage("<XDtForm:classNameLower/>.updated"));
            saveMessages(request, messages);

            return mapping.findForward("edit");
        }
    }

    public ActionForward search(ActionMapping mapping, ActionForm form,
                                HttpServletRequest request,
                                HttpServletResponse response)
    throws Exception {
        if (log.isDebugEnabled()) {
            log.debug("Entering 'search' method");
        }

        <XDtClass:className/>Manager mgr = (<XDtClass:className/>Manager) getBean("<XDtForm:classNameLower/>Manager");
        request.setAttribute(Constants.<XDtForm:classNameUpper/>_LIST, mgr.get<XDtClass:className/>s(null));

        return mapping.findForward("list");
    }
}
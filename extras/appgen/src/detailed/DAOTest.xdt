<XDtTagDef:tagDef namespace="Form" handler="org.example.antbook.xdoclet.FormTagsHandler"/>
<XDtTagDef:tagDef namespace="MethodEx" handler="org.example.antbook.xdoclet.MethodExTagsHandler"/>
package <XDtForm:parentPackageName/>.dao;

import java.util.List;

import <XDtPackage:packageName/>.<XDtForm:className/>;

import org.springframework.orm.ObjectRetrievalFailureException;

public class <XDtForm:className/>DAOTest extends BaseDAOTestCase {
    private <XDtMethodEx:idField getType="propertyType"/> <XDtForm:classNameLower/>Id = new <XDtMethodEx:idField getType="propertyType"/>("1");
    private <XDtForm:className/> <XDtForm:classNameLower/> = null;
    private <XDtForm:className/>DAO dao = null;

    protected void setUp() throws Exception {
        super.setUp();
        dao = (<XDtForm:className/>DAO) ctx.getBean("<XDtForm:classNameLower/>DAO");
    }

    protected void tearDown() throws Exception {
        super.tearDown();
        dao = null;
    }

    public void testAdd<XDtForm:className/>() throws Exception {
        <XDtForm:classNameLower/> = new <XDtForm:className/>();

        // set required fields
        <XDtMethod:forAllMethods>
        <XDtMethod:ifMethodTagValueEquals tagName="hibernate.id" paramName="generator-class" value="assigned">
        <XDtMethodEx:methodType/> <XDtMethod:propertyName/> = <XDtMethodEx:randomValueForSetter/>;
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>(<XDtMethod:propertyName/>);
        </XDtMethod:ifMethodTagValueEquals>

        <XDtMethod:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
        <XDtMethodEx:methodType/> <XDtMethod:propertyName/> = <XDtMethodEx:randomValueForSetter/>;
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>(<XDtMethod:propertyName/>);        
        </XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:forAllMethods>

        dao.save<XDtForm:className/>(<XDtForm:classNameLower/>);

        // verify a primary key was assigned
        assertNotNull(<XDtForm:classNameLower/>.<XDtMethodEx:idField getType="getterName"/>());

        // verify set fields are same after save
        <XDtMethod:forAllMethods>
        <XDtMethod:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
        assertEquals(<XDtMethod:propertyName/>, <XDtForm:classNameLower/>.<XDtMethod:getterMethod/>());
        </XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:forAllMethods>
    }

    public void testGet<XDtForm:className/>() throws Exception {
        <XDtForm:classNameLower/> = dao.get<XDtForm:className/>(<XDtForm:classNameLower/>Id);
        assertNotNull(<XDtForm:classNameLower/>);
    }

    public void testGet<XDtForm:className/>s() throws Exception {
        <XDtForm:classNameLower/> = new <XDtForm:className/>();
        <XDtMethod:forAllMethods>
        <XDtMethod:ifMethodTagValueEquals tagName="hibernate.id" paramName="generator-class" value="assigned">
        <XDtType:ifIsOfType value="return-type" type="java.lang.String" extent="concrete-type">
        //set value for primary key
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>("1");
        </XDtType:ifIsOfType>
        </XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:forAllMethods>

        List results = dao.get<XDtForm:className/>s(<XDtForm:classNameLower/>);
        assertTrue(results.size() > 0);
    }

    public void testSave<XDtForm:className/>() throws Exception {
        <XDtForm:classNameLower/> = dao.get<XDtForm:className/>(<XDtForm:classNameLower/>Id);

        // update required fields
        <XDtMethod:forAllMethods>
        <XDtMethod:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
        <XDtMethodEx:methodType/> <XDtMethod:propertyName/> = <XDtMethodEx:randomValueForSetter/>;
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>(<XDtMethod:propertyName/>);        
        </XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:forAllMethods>

        dao.save<XDtForm:className/>(<XDtForm:classNameLower/>);

        <XDtMethod:forAllMethods>
        <XDtMethod:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
        assertEquals(<XDtMethod:propertyName/>, <XDtForm:classNameLower/>.<XDtMethod:getterMethod/>());
        </XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:forAllMethods>
    }

    public void testRemove<XDtForm:className/>() throws Exception {
        <XDtMethodEx:idField getType="propertyType"/> removeId = new <XDtMethodEx:idField getType="propertyType"/>("3");
        dao.remove<XDtForm:className/>(removeId);
        try {
            dao.get<XDtForm:className/>(removeId);
            fail("<XDtForm:classNameLower/> found in database");
        } catch (ObjectRetrievalFailureException e) {
            assertNotNull(e.getMessage());
        }
    }
}

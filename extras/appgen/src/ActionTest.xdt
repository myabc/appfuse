<XDtTagDef:tagDef namespace="Form" handler="org.example.antbook.xdoclet.FormTagsHandler"/>package <XDtForm:parentPackageName/>.webapp.action;

import <XDtForm:parentPackageName/>.Constants;
import <XDtForm:parentPackageName/>.webapp.form.<XDtClass:className/>Form;

public class <XDtClass:className/>ActionTest extends BaseStrutsTestCase {

    public <XDtClass:className/>ActionTest(String name) {
        super(name);
    }

    public void testAdd() throws Exception {
        setRequestPathInfo("/save<XDtClass:className/>");
        addRequestParameter("method", "Save");
        
        <XDtClass:className/>Form <XDtForm:classNameLower/>Form = new <XDtClass:className/>Form();
        // set required fields
        <XDtMethod:forAllMethods>
        <XDtMethod:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
        <XDtType:ifIsOfType value="return-type" type="java.lang.Boolean" extent="concrete-type">
        <XDtForm:classNameLower/>Form.<XDtMethod:setterMethod/>(Boolean.TRUE);
        </XDtType:ifIsOfType>
        <XDtType:ifIsOfType value="return-type" type="java.lang.String" extent="concrete-type">
        <XDtForm:classNameLower/>Form.<XDtMethod:setterMethod/>("<XDtMethod:propertyName/>");
        </XDtType:ifIsOfType>
        <XDtType:ifIsOfType value="return-type" type="java.lang.Long" extent="concrete-type">
        <XDtForm:classNameLower/>Form.<XDtMethod:setterMethod/>(new Long(100));
        </XDtType:ifIsOfType>
        <XDtType:ifIsOfType value="return-type" type="java.lang.Integer" extent="concrete-type">
        <XDtForm:classNameLower/>Form.<XDtMethod:setterMethod/>(new Integer(100));
        </XDtType:ifIsOfType>
        </XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:forAllMethods>
        
        request.setAttribute(Constants.<XDtForm:classNameUpper/>_KEY, <XDtForm:classNameLower/>Form);

        actionPerform();

        verifyForward("list");
        verifyNoActionErrors();
    }

    public void testSearch() {
        setRequestPathInfo("/<XDtForm:classNameLower/>s");
        addRequestParameter("method", "Search");
        
        actionPerform();

        verifyForward("list");
        assertNotNull(request.getAttribute(Constants.<XDtForm:classNameUpper/>_LIST));
        verifyNoActionErrors();
    }

    public void testEdit() throws Exception {
        setRequestPathInfo("/edit<XDtClass:className/>");
        addRequestParameter("method", "Edit");
        addRequestParameter("id", "1");

        actionPerform();

        verifyForward("edit");
        assertNotNull(request.getAttribute(Constants.<XDtForm:classNameUpper/>_KEY));
        verifyNoActionErrors();
    }

    public void testSave() throws Exception {
        setRequestPathInfo("/edit<XDtClass:className/>");
        addRequestParameter("method", "Edit");
        addRequestParameter("id", "1");

        actionPerform();

        <XDtClass:className/>Form <XDtForm:classNameLower/>Form =
            (<XDtClass:className/>Form) request.getAttribute(Constants.<XDtForm:classNameUpper/>_KEY);
        assertNotNull(<XDtForm:classNameLower/>Form);

        setRequestPathInfo("/save<XDtClass:className/>");
        addRequestParameter("method", "Save");

        // update the form's required string fields and add it back to the request
        <XDtMethod:forAllMethods>
        <XDtMethod:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
        <XDtType:ifIsOfType value="return-type" type="java.lang.String" extent="concrete-type">
        <XDtForm:classNameLower/>Form.<XDtMethod:setterMethod/>("<XDtMethod:propertyName/>");
        </XDtType:ifIsOfType>
        </XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:forAllMethods>

        request.setAttribute(Constants.<XDtForm:classNameUpper/>_KEY, <XDtForm:classNameLower/>Form);

        actionPerform();

        verifyForward("edit");
        // verify success messages
        verifyActionMessages(new String[] {"<XDtForm:classNameLower/>.updated"});
        verifyNoActionErrors();
    }

    public void testRemove() throws Exception {
        setRequestPathInfo("/edit<XDtClass:className/>");
        addRequestParameter("method", "Delete");
        addRequestParameter("id", "2");
        
        actionPerform();

        verifyForward("list");
        verifyNoActionErrors();
    }
}
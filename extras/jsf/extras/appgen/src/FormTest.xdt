<XDtTagDef:tagDef namespace="Form" handler="org.example.antbook.xdoclet.FormTagsHandler"/>package <XDtForm:parentPackageName/>.webapp.action;

public class <XDtClass:className/>FormTest extends BasePageTestCase {
    private <XDtClass:className/>Form bean;
    
    protected void setUp() throws Exception {    
        super.setUp();
        bean = (<XDtClass:className/>Form) getManagedBean("<XDtForm:classNameLower/>Form");
    }
    
    protected void tearDown() throws Exception {
        super.tearDown();
        bean = null;
    }

    public void testAdd() throws Exception {
        <XDtClass:className/> <XDtForm:classNameLower/> = new <XDtClass:className/>();
        // set required fields
        <XDtMethod:forAllMethods>
        <XDtMethod:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
        <XDtType:ifIsOfType value="return-type" type="java.lang.Boolean" extent="concrete-type">
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>(Boolean.TRUE);
        </XDtType:ifIsOfType>
        <XDtType:ifIsOfType value="return-type" type="java.lang.String" extent="concrete-type">
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>("<XDtMethod:propertyName/>");
        </XDtType:ifIsOfType>
        <XDtType:ifIsOfType value="return-type" type="java.lang.Long" extent="concrete-type">
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>(new Long(100));
        </XDtType:ifIsOfType>
        <XDtType:ifIsOfType value="return-type" type="java.lang.Integer" extent="concrete-type">
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>(new Integer(100));
        </XDtType:ifIsOfType>
        </XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:forAllMethods>
        bean.set<XDtClass:className/>(<XDtForm:classNameLower/>);

        assertEquals(bean.save(), "list");
        assertFalse(bean.hasFieldErrors());
    }

    public void testEdit() throws Exception {
        log.debug("testing edit...");
        bean.setId("1");
        assertNull(bean.get<XDtClass:className/>());

        assertEquals(bean.edit(), "edit");
        assertNotNull(bean.get<XDtClass:className/>());
        assertFalse(bean.hasErrors());
    }

    public void testSave() {
        bean.setId("1");

        assertEquals(bean.edit(), "edit");
        assertNotNull(bean.get<XDtClass:className/>());
        <XDtClass:className/> <XDtForm:classNameLower/> = bean.get<XDtClass:className/>();

        // update fields
        <XDtMethod:forAllMethods>
        <XDtMethod:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
        <XDtType:ifIsOfType value="return-type" type="java.lang.String" extent="concrete-type">
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>("<XDtMethod:propertyName/>");
        </XDtType:ifIsOfType>
        </XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:forAllMethods>
        bean.set<XDtClass:className/>(<XDtForm:classNameLower/>);

        assertEquals(bean.save(), "edit");
        assertFalse(bean.hasErrors());
    }

    public void testRemove() throws Exception {
        <XDtClass:className/> <XDtForm:classNameLower/> = new <XDtClass:className/>();
        <XDtForm:classNameLower/>.setId(new Long(2));
        bean.set<XDtClass:className/>(<XDtForm:classNameLower/>);

        assertEquals(bean.delete(), "list");
        assertFalse(bean.hasErrors());
    }
}
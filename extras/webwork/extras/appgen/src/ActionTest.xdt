<XDtTagDef:tagDef namespace="Form" handler="org.example.antbook.xdoclet.FormTagsHandler"/>package <XDtForm:parentPackageName/>.webapp.action;

import org.springframework.mock.web.MockHttpServletRequest;

import com.opensymphony.webwork.ServletActionContext;

import <XDtPackage:packageName/>.<XDtForm:className/>;

public class <XDtForm:className/>ActionTest extends BaseActionTestCase {
    private <XDtForm:className/>Action action;
    
    protected void setUp() throws Exception {    
        super.setUp();
        action = (<XDtForm:className/>Action) ctx.getBean("<XDtForm:classNameLower/>Action");
    }

    protected void tearDown() throws Exception {
        super.tearDown();
        action = null;
    }

    public void testAdd() throws Exception {
        <XDtForm:className/> <XDtForm:classNameLower/> = new <XDtForm:className/>();
        // set required fields
        <XDtMethodEx:forAllMethods>
        <XDtMethodEx:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
        <XDtMethodEx:setterWithValue/>
        </XDtMethodEx:ifMethodTagValueEquals>
        </XDtMethodEx:forAllMethods>
        action.set<XDtForm:className/>(<XDtForm:classNameLower/>);

        assertEquals(action.save(), "success");
        assertFalse(action.hasFieldErrors());
    }

    public void testList() throws Exception {
        assertNull(action.get<XDtForm:className/>s());

        assertEquals(action.list(), "success");
        assertNotNull(action.get<XDtForm:className/>s());
        assertFalse(action.hasActionErrors());
    }

    public void testEdit() throws Exception {
        log.debug("testing edit...");
        action.<XDtMethodEx:idField getType="setterName"/>("1");
        assertNull(action.get<XDtForm:className/>());

        assertEquals(action.edit(), "success");
        assertNotNull(action.get<XDtForm:className/>());
        assertFalse(action.hasActionErrors());
    }

    public void testSave() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        ServletActionContext.setRequest(request);
        action.<XDtMethodEx:idField getType="setterName"/>("1");

        assertEquals(action.edit(), "success");
        assertNotNull(action.get<XDtForm:className/>());
        <XDtForm:className/> <XDtForm:classNameLower/> = action.get<XDtForm:className/>();

        // update fields
        <XDtMethodEx:forAllMethods>
        <XDtMethodEx:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
        <XDtMethodEx:setterWithValue/>
        </XDtMethodEx:ifMethodTagValueEquals>
        </XDtMethodEx:forAllMethods>
        action.set<XDtForm:className/>(<XDtForm:classNameLower/>);

        assertEquals(action.save(), "input");
        assertFalse(action.hasActionErrors());
        assertFalse(action.hasFieldErrors());
        assertNotNull(request.getSession().getAttribute("messages"));
    }

    public void testRemove() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        ServletActionContext.setRequest(request);
        action.setDelete("");
        <XDtForm:className/> <XDtForm:classNameLower/> = new <XDtForm:className/>();
        <XDtForm:classNameLower/>.<XDtMethodEx:idField getType="setterName"/>(new <XDtMethodEx:idField getType="propertyType"/>("2"));
        action.set<XDtForm:className/>(<XDtForm:classNameLower/>);

        assertEquals(action.delete(), "success");
        assertNotNull(request.getSession().getAttribute("messages"));
    }
}

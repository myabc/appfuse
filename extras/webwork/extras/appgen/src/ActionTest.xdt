<XDtTagDef:tagDef namespace="Form" handler="org.example.antbook.xdoclet.FormTagsHandler"/>package <XDtForm:parentPackageName/>.webapp.action;

import org.springframework.mock.web.MockHttpServletRequest;

import com.opensymphony.webwork.ServletActionContext;

public class <XDtClass:className/>ActionTest extends BaseActionTestCase {
    private <XDtClass:className/>Action action;
    
    protected void setUp() throws Exception {    
        super.setUp();
        action = (<XDtClass:className/>Action) ctx.getBean("<XDtForm:classNameLower/>Action");
    }

    protected void tearDown() throws Exception {
        super.tearDown();
        action = null;
    }

    public void testAdd() throws Exception {
        <XDtClass:className/> <XDtForm:classNameLower/> = new <XDtClass:className/>();
        // set required fields
		<XDtMethod:forAllMethods>
		<XDtMethod:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
		<XDtType:ifIsOfType value="return-type" type="java.lang.Boolean" extent="concrete-type">
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>(Boolean.TRUE);
		</XDtType:ifIsOfType>
		<XDtType:ifIsOfType value="return-type" type="java.lang.String" extent="concrete-type">
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>("<XDtMethod:propertyName/>");
		</XDtType:ifIsOfType>
		<XDtType:ifIsOfType value="return-type" type="java.lang.Long" extent="concrete-type">
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>(new Long(100));
		</XDtType:ifIsOfType>
		<XDtType:ifIsOfType value="return-type" type="java.lang.Integer" extent="concrete-type">
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>(new Integer(100));
		</XDtType:ifIsOfType>
		</XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:forAllMethods>

        assertEquals(action.save(), "success");
        assertFalse(action.hasFieldErrors());
    }

    public void testList() throws Exception {
        assertNull(action.get<XDtClass:className/>s());
        assertEquals(action.list(), "success");
        assertNotNull(action.get<XDtClass:className/>s());
        assertFalse(action.hasActionErrors());
    }

    public void testEdit() throws Exception {
        log.debug("testing edit...");
        action.setId("1");
        assertNull(action.get<XDtClass:className/>());
        assertEquals(action.edit(), "success");
        assertNotNull(action.get<XDtClass:className/>());
        assertFalse(action.hasActionErrors());
    }

    public void testSave() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        ServletActionContext.setRequest(request);
        action.setId("1");
        assertEquals(action.edit(), "success");
        assertNotNull(action.get<XDtClass:className/>());
        
        // update fields
		<XDtMethod:forAllMethods>
		<XDtMethod:ifMethodTagValueEquals tagName="hibernate.property" paramName="not-null" value="true">
		<XDtType:ifIsOfType value="return-type" type="java.lang.String" extent="concrete-type">
        <XDtForm:classNameLower/>.<XDtMethod:setterMethod/>("<XDtMethod:propertyName/>");
		</XDtType:ifIsOfType>
		</XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:forAllMethods>

        assertEquals(action.save(), "input");
        assertFalse(action.hasActionErrors());
        assertFalse(action.hasFieldErrors());
        assertNotNull(request.getSession().getAttribute("messages"));
    }

    public void testRemove() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        ServletActionContext.setRequest(request);
        action.setDelete("");
        <XDtClass:className/> <XDtForm:classNameLower/> = new <XDtClass:className/>();
        <XDtForm:classNameLower/>.setId(new Long(2));
        action.set<XDtClass:className/>(<XDtForm:classNameLower/>);
        assertEquals(action.delete(), "success");
        assertNotNull(request.getSession().getAttribute("messages"));
    }
}
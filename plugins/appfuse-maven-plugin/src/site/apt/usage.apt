                                    ------
                             Appfuse Plugin Usage
                                    ------
                                David L. Whitehurst
                                    ------
                                 Jan 21, 2006
                                 


Maven 2 Appfuse Plugin

* Usage

  This plugin is complex and performs many tasks that assist the AppFuse developer in the creation of artifacts
  and source code for extending the functionality of AppFuse.  To use the plugin, please be sure that you have
  read the installation page before proceeding.  Once you have properly set up your project to use this plugin,
  you should try one of the following methods for adding functionality to your new AppFuse project.

* Database to Java Object Generation

  This plugin provides support for generating the data layer for the AppFuse environment.  This plugin is still
  in its early stages but do give it a test and give us your feedback thru JIRA.

  Create the following file hibernate.reveng.xml and place in /src/main/resources in your archetype-created
  AppFuse project. You can get many more details at the Hibernate tools website http://www.hibernate.org/255.html.

---------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-reverse-engineering SYSTEM "http://hibernate.sourceforge.net/hibernate-reverse-engineering-3.0.dtd">
<hibernate-reverse-engineering>
 <schema-selection/>
</hibernate-reverse-engineering>
-------------------

  This will help the goal "dbtoxml" create Hibernate mappings for all of your schema table objects.  You can use
  the following modification to the reverse engineering file to only generate a mapping for a single table.

---------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-reverse-engineering SYSTEM "http://hibernate.sourceforge.net/hibernate-reverse-engineering-3.0.dtd">
<hibernate-reverse-engineering>
 <schema-selection match-schema=".*" match-table="ROLE"/>
</hibernate-reverse-engineering>
-------------------

  Once you've decided whether you are going to generate one mapping or all mappings, you'll need to verify some
  default properties are acceptable.  If you have created a new project for your own AppFuse development, you
  will probably want to alter the property ${appfuse.base.package}.  You can do this by adding the property
  to your project pom.xml like so:

---------------------
...
<properties>
 <appfuse.base.package>org.dlw</appfuse.base.package>
 <dao.framework>hibernate</dao.framework>
 <web.framework>struts</web.framework>
...
---------------------

  You should be ready now to generate your new mapping(s) from the database defined in ${appfuse.database.properties}.
  The default value is ${basedir}/target/classes/jdbc.properties.  If you created your AppFuse project from an
  archetype, this file should be there and populated correctly.  Now, go to the root directory of your AppFuse
  project and type the following command:

---------------------
mvn org.appfuse:appfuse-maven-plugin:dbtoxml
---------------------

  There's a shortcut to the above command, but for now this is the formal way to call the plugin and the goal.
  You should have created mappings in /target/appfuse/generated-sources/org/dlw (remember our base package above).

  You can now copy your mappings into your project for their use.  By default the files will be placed in the
  directory src/main/resources.  You can override this by adding the property ${appfuse.model.directory} in your
  pom.xml.  Run the following command to copy the model file mappings.

---------------------
mvn org.appfuse:appfuse-maven-plugin:copyxmlfiles
---------------------


* Hibernate Mapping to Java Object Generation

  
